/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Test = {
  _id: string;
  _type: "test";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
};

export type Component = {
  _id: string;
  _type: "component";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  itemTitle?: string;
  itemText?: string;
  link?: {
    href?: string;
  };
  itemImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type Widget = {
  _id: string;
  _type: "widget";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  viewType?: Slug;
  layoutVariant?: string;
  mainTitle?: string;
  subTitle?: string;
  mainText?: string;
  subText?: string;
  mainItems?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "component";
  }>;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    Alt?: string;
    _type: "image";
  };
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type PageContent = {
  _id: string;
  _type: "pageContent";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  pagePlacements?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "widget";
  }>;
};

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  pageContents?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "pageContent";
  }>;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type Navigation = {
  _id: string;
  _type: "navigation";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  navigations?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "page";
  }>;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | Test | Component | Widget | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | PageContent | Page | Slug | Navigation;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: GET_PAGE
// Query: *[_type == "page" && slug.current == $slug]{    slug,    title,    pageContents[]->{      title,      pagePlacements[]-> {        name,        viewType,        layoutVariant,        mainTitle,        subTitle,        mainText,        subText,        mainItems[]-> {          _id,          itemTitle,          itemText,          itemLink,          itemImage,          ...,        }      }    }  }
export type GET_PAGEResult = Array<{
  slug: Slug | null;
  title: string | null;
  pageContents: Array<{
    title: string | null;
    pagePlacements: Array<{
      name: string | null;
      viewType: Slug | null;
      layoutVariant: string | null;
      mainTitle: string | null;
      subTitle: string | null;
      mainText: string | null;
      subText: string | null;
      mainItems: Array<{
        _id: string;
        itemTitle?: string;
        itemText?: string;
        itemLink: null;
        itemImage?: {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: "image";
        };
        _type: "component";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        link?: {
          href?: string;
        };
      }> | null;
    }> | null;
  }> | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n    *[_type == \"page\" && slug.current == $slug]{\n    slug,\n    title,\n    pageContents[]->{\n      title,\n      pagePlacements[]-> {\n        name,\n        viewType,\n        layoutVariant,\n        mainTitle,\n        subTitle,\n        mainText,\n        subText,\n        mainItems[]-> {\n          _id,\n          itemTitle,\n          itemText,\n          itemLink,\n          itemImage,\n          ...,\n        }\n      }\n    }\n  }\n": GET_PAGEResult;
  }
}
